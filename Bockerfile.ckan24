#!/bin/bash
# Purpose: Ckan 2.4
# Author : Anh K. Huynh

if [[ -f "$(dirname ${BASH_SOURCE[0]:-.})"/icy/bocker/Bockerfile.supervisor ]]; then
  ed_reuse "$(dirname ${BASH_SOURCE[0]:-.})"/icy/bocker/Bockerfile.supervisor
elif [[ -f "$(dirname ${BASH_SOURCE[0]:-.})"/../icy/bocker/Bockerfile.supervisor ]]; then
  ed_reuse "$(dirname ${BASH_SOURCE[0]:-.})"/../icy/bocker/Bockerfile.supervisor
fi

ed_expose 80
ed_volume /var/lib/ckan


ed_ship   --later \
            ed_ckan24_configure \
            ed_ckan24_configure_apache \
            ed_ckan24_configure_dataproxy \
            ed_ckan24_daemonize

ed_env    CKAN_HOME   /usr/lib/ckan/default
ed_env    CKAN_CONFIG /etc/ckan/default
ed_env    CKAN_DATA   /var/lib/ckan

ed_bocker() {
  ed_group \
    ed_ckan24_pre_install

  ed_copy .                             /usr/lib/ckan/default/src/ckan/
  ed_copy ./contrib/docker/apache.wsgi  /etc/ckan/default/apache.wsgi
  ed_copy ./contrib/docker/my_init.d/   /etc/s.supervisor/

  ed_group \
    ed_ckan24_install
}

ed_ckan24_pre_install() {
  mkdir -pv \
    $CKAN_HOME/src/ \
    $CKAN_CONFIG \
    $CKAN_DATA \
    /etc/apache2/sites-available/
}

ed_ckan24_install() {
  ed_apt_install \
    python-minimal \
    python-dev \
    python-virtualenv \
    libevent-dev \
    libpq-dev \
    apache2 \
    libapache2-mod-wsgi \
    build-essential \
    git \
    libxml2-dev \
    libxslt1-dev

  virtualenv $CKAN_HOME

  $CKAN_HOME/bin/pip install -r $CKAN_HOME/src/ckan/requirements.txt
  $CKAN_HOME/bin/pip install -e $CKAN_HOME/src/ckan/
  ln -s $CKAN_HOME/src/ckan/ckan/config/who.ini $CKAN_CONFIG/who.ini

  # Thanks to @huynq
  # Install CKANExt-Harvest
  # https://github.com/ckan/ckanext-harvest
  $CKAN_HOME/bin/pip install -e git+https://github.com/ckan/ckanext-harvest.git#egg=ckanext-harvest
  $CKAN_HOME/bin/pip install -r /usr/lib/ckan/default/src/ckanext-harvest/pip-requirements.txt
  #import db for plugins:
  #paster —plugin=ckanext-harvest harvester initdb —config=/etc/ckan/default/

  # Install ckanext-pdfview
  $CKAN_HOME/bin/pip install ckanext-pdfview
  $CKAN_HOME/bin/pip install -e git+https://github.com/okfn/ckanext-archiver.git#egg=ckanext-archiver
  $CKAN_HOME/bin/pip install -e git+https://github.com/datagovuk/ckanext-datapreview.git#egg=ckanext-datapreview

  # FIXME: Remove this stupid line
  echo "Listen 8080" > /etc/apache2/ports.conf

  # We don't remove some -dev packages to support some hot-fix future
  # package installation !!! The `build-essential` package is very small.
  ed_apt_purge build-essential git

  ed_supervisor_generator "ed_ckan24_configure"
}

ed_ckan24_configure() {
  # Number of files may be very large, and `chown` process
  # would be very very very very slow....
  chown www-data:www-data $CKAN_DATA
  chown :www-data $CKAN_HOME $CKAN_CONFIG

  ed_ckan24_configure_apache
  ed_ckan24_configure_dataproxy

  ed_supervisor_config_template \
    --name "apache" \
    --command "/bocker.sh ed_ckan24_daemonize" \
    --dir "/" \
    --user "root"
}

ed_ckan24_configure_dataproxy() {
  local _dataproxy_url1 _dataproxy_url2

  if [[ -z "${CKAN_DATAPROXY_URL:-}" ]]; then
    echo >&2 ":: $FUNCNAME: Data proxy is not configured. Return."
    return 0
  fi

  _dataproxy_url1="${CKAN_DATAPROXY_URL:-http://dataproxy}"
  _dataproxy_url2="$(sed -r -e 's#^https?:##g' <<< $_dataproxy_url1)"

  grep -REl -- \
    '((my\.jsonpdataproxyUrl)|(my\.dataproxy_url))[[:space:]]*=' \
    $CKAN_HOME/ \
  | while read FILE; do
      echo >&2 ":: $FUNCNAME ~~ patching $FILE..."
      sed -i -r -e "s#(my\.jsonpdataproxyUrl)[[:space:]]*=[[:space:]]*[^;]+;#\1 = '${_dataproxy_url1}';#g" $FILE
      sed -i -r -e "s#(my\.dataproxy_url)[[:space:]]*=[[:space:]]*[^;]+;#\1 = '${_dataproxy_url2}';#g"     $FILE
    done
}

ed_ckan24_daemonize() {
  source /etc/apache2/envvars
  exec /usr/sbin/apache2 -D FOREGROUND
}

ed_ckan24_configure_apache() {
  rm -fv /etc/apache2/sites-enabled/*

  echo "Listen 80" > /etc/apache2/ports.conf

  cat > /etc/apache2/sites-enabled/ckan_default.conf \
<<EOF
  <VirtualHost 0.0.0.0:80>
    ServerName ckan
    ServerAlias *

    <Directory "${CKAN_CONFIG}">
      Require all granted
    </Directory>

    WSGIScriptAlias / ${CKAN_CONFIG}/apache.wsgi
    WSGIPassAuthorization On

    ErrorLog  /var/log/apache2/error.log
    CustomLog /dev/null combined
  </VirtualHost>
EOF

}
